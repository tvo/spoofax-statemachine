module statemachine

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/StateMachine
  lib/editor-common.generated
  check
  desugar
  generate-java
  generate-dot
  term-to-dot

rules // Main editor interface (defined by editor/stm-Builders and -References.esv)

  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
  // each a list of (term, message) tuples or simply (message) terms.
  editor-analyze:
    (ast, path, project-path) -> (ast, errors, warnings, notes)
    with
      editor-init;
      analyze;
      errors   := <collect-all(constraint-error, conc)> ast;
      warnings := []; //<collect-all(constraint-warning, conc)> ast;
      notes    := []  //<collect-all(constraint-note, conc)> ast

  // Transforms the state machine to Java
  generate-java:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename  := <guarantee-extension(|"java")> path;
      classname := <base-filename; remove-extension> path;
      result    := <desugar; to-java(|classname)> ast

  // Transforms the state machine selection to Dot
  generate-dot:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"dot")> path;
      result   := <desugar; to-dot> ast

  // Prints the abstract syntax ATerm of a selection.
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected // we just return the input term

  generate-desugared-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := <try(desugar)> selected

  // Resolves a reference when the user control-clicks or presses F3 in the editor.
  // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.
  editor-resolve:
    (node, position, ast, path, project-path) -> target
    where
      target := <editor-resolve-helper> node

  editor-resolve-helper:
    EventRef(x) -> <GetEvent> x
  editor-resolve-helper:
    CommandRef(x) -> <GetCommand> x
  editor-resolve-helper:
    StateRef(x) -> <GetState> x

  // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> target]]

  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
  editor-complete:
    (node, position, ast, path, project-path) -> proposals
    where
      proposals := <editor-complete-helper> node

  editor-complete-helper:
    EventRef(COMPLETION(prefix)) -> <all-keys-GetEvent>
  editor-complete-helper:
    CommandRef(COMPLETION(prefix)) -> <all-keys-GetCommand>
  editor-complete-helper:
    StateRef(COMPLETION(prefix))
      -> <conc> ( <all-keys-GetState>
                , <all-keys-GetUndeclaredState; filter(not(?prefix))>)
  editor-complete-helper:
    State(COMPLETION(prefix), _, _) -> <all-keys-GetUndeclaredState>

  test-term-to-dot:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"dot")> path;
      result   := <term-to-dot> selected
